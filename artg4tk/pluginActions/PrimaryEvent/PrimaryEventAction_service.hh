// PPrimaryEventAction is the service that injects particles into
// the simulation.
// To use this action, all you need to do is put it in the services section
// of the configuration file, like this:
//
// services: {
//   ...
//   user: {
//     PPrimaryEventAction: {}
//     ...
//   }
// }

// Expected parameters:
// - name (string): A name describing the action service.
//       Default is 'exampleParticleGun'

// - use_HEP_event (bool): A flag; if true, the primaries will be taken from
//       an input file called 'pythia_event.data'. If false, primaries will
//       be generated by a particle gun.
//       Default is true.

// Authors: Tasha Arvanitis, Adam Lyon
// Date: August 2012

#ifndef artg4tk_pluginActions_PrimaryEvent_PrimaryEventAction_service_hh
#define artg4tk_pluginActions_PrimaryEvent_PrimaryEventAction_service_hh

#include "fhiclcpp/fwd.h"
#include "art/Framework/Services/Registry/ServiceDeclarationMacros.h"

#include "artg4tk/actionBase/PrimaryGeneratorActionBase.hh"

#include "Geant4/G4ThreeVector.hh"
class G4Event;

namespace artg4tk {

  class PrimaryEventActionService : public artg4tk::PrimaryGeneratorActionBase {
  public:
    PrimaryEventActionService(fhicl::ParameterSet const&);

  private:
    void addG4Particle(G4Event* event,
                       int pdgId,
                       const G4ThreeVector& pos,
                       double time,
                       double energy,
                       const G4ThreeVector& mom);

    // To generate primaries, we need to overload the GeneratePrimaries
    // method.

    void generatePrimaries(G4Event* anEvent) override;
  };
} // namespace artg4tk

DECLARE_ART_SERVICE(artg4tk::PrimaryEventActionService, LEGACY)

#endif /* artg4tk_pluginActions_PrimaryEvent_PrimaryEventAction_service_hh */
